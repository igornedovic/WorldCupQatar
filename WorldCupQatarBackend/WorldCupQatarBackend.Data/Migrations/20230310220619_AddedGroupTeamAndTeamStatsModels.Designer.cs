// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldCupQatarBackend.Data;

namespace WorldCupQatarBackend.Data.Migrations
{
    [DbContext(typeof(WorldCupDbContext))]
    [Migration("20230310220619_AddedGroupTeamAndTeamStatsModels")]
    partial class AddedGroupTeamAndTeamStatsModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("WorldCupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id", "WorldCupId");

                    b.HasIndex("WorldCupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorldCupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("WorldCupId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamStatsId")
                        .HasColumnType("int");

                    b.Property<int>("WorldCupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamStatsId");

                    b.HasIndex("GroupId", "WorldCupId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.TeamStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScored")
                        .HasColumnType("int");

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TeamsStats");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.WorldCup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorldCups");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Group", b =>
                {
                    b.HasOne("WorldCupQatarBackend.Data.Models.WorldCup", "WorldCup")
                        .WithMany("Groups")
                        .HasForeignKey("WorldCupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorldCup");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Stadium", b =>
                {
                    b.HasOne("WorldCupQatarBackend.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorldCupQatarBackend.Data.Models.WorldCup", "WorldCup")
                        .WithMany("Stadiums")
                        .HasForeignKey("WorldCupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("WorldCup");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Team", b =>
                {
                    b.HasOne("WorldCupQatarBackend.Data.Models.TeamStats", "TeamStats")
                        .WithMany()
                        .HasForeignKey("TeamStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorldCupQatarBackend.Data.Models.Group", "Group")
                        .WithMany("Teams")
                        .HasForeignKey("GroupId", "WorldCupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("TeamStats");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.Group", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("WorldCupQatarBackend.Data.Models.WorldCup", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Stadiums");
                });
#pragma warning restore 612, 618
        }
    }
}
